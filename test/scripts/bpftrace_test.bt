#!/usr/bin/env bpftrace

/*
 * eTracee bpftrace 测试脚本
 * 用于验证系统调用捕获功能
 */

BEGIN {
    printf("开始监控系统调用...\n");
    printf("时间戳\t\tPID\t进程名\t\t系统调用\t参数\n");
    printf("================================================================\n");
}

// 监控 execve 系统调用
tracepoint:syscalls:sys_enter_execve {
    printf("%s\t%d\t%-15s\texecve\t\t%s\n", 
           strftime("%H:%M:%S", nsecs), 
           pid, 
           comm, 
           str(args->filename));
}

// 监控 openat 系统调用（过滤掉一些噪音）
tracepoint:syscalls:sys_enter_openat 
/ !strcontains(str(args->filename), "/proc/") && 
  !strcontains(str(args->filename), "/sys/") &&
  !strcontains(str(args->filename), "/dev/") / {
    printf("%s\t%d\t%-15s\topenat\t\t%s\n", 
           strftime("%H:%M:%S", nsecs), 
           pid, 
           comm, 
           str(args->filename));
}

// 监控 connect 系统调用
tracepoint:syscalls:sys_enter_connect {
    printf("%s\t%d\t%-15s\tconnect\t\tfd=%d\n", 
           strftime("%H:%M:%S", nsecs), 
           pid, 
           comm, 
           args->fd);
}

// 监控进程退出
tracepoint:sched:sched_process_exit {
    printf("%s\t%d\t%-15s\texit\t\tcode=%d\n", 
           strftime("%H:%M:%S", nsecs), 
           pid, 
           comm, 
           args->code);
}

// 每10秒输出统计信息
interval:s:10 {
    printf("\n--- 统计信息 (每10秒) ---\n");
    printf("当前时间: %s\n", strftime("%Y-%m-%d %H:%M:%S", nsecs));
    printf("继续监控中...\n\n");
}

END {
    printf("\n监控结束\n");
}